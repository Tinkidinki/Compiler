Nonterminals useless in grammar

   program
   method_decls


Terminals unused in grammar

   BAD_CHAR
   CLASS
   PROGRAM


Rules useless in grammar

   47 program: CLASS PROGRAM LEFT_CURLY var_decls method_decls RIGHT_CURLY
   48        | CLASS PROGRAM LEFT_CURLY method_decls RIGHT_CURLY

   49 method_decls: method_decl
   50             | method_decls method_decl


Grammar

    0 $accept: Goal $end

    1 Goal: method_decl

    2 method_decl: composite_type ID LEFT_ROUND parameters RIGHT_ROUND block
    3            | composite_type ID LEFT_ROUND RIGHT_ROUND block

    4 parameters: composite_type ID
    5           | parameters COMMA composite_type ID

    6 composite_type: TYPE
    7               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE
    8               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    9 block: LEFT_CURLY var_decls statements RIGHT_CURLY
   10      | LEFT_CURLY statements RIGHT_CURLY

   11 var_decls: var_decl
   12          | var_decls var_decl

   13 var_decl: composite_type ID SEMICOLON

   14 statements: statement
   15           | statements statement

   16 statement: ID EQUALS expr SEMICOLON
   17          | method_call SEMICOLON
   18          | IF LEFT_ROUND expr RIGHT_ROUND block
   19          | IF LEFT_ROUND expr RIGHT_ROUND block ELSE block
   20          | expr QUESTION_MARK statement COLON statement
   21          | WHILE LEFT_ROUND expr RIGHT_ROUND block
   22          | FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block
   23          | RETURN expr SEMICOLON
   24          | BREAK SEMICOLON
   25          | CONTINUE SEMICOLON

   26 expr: literal
   27     | expr ARITH_OP expr
   28     | expr REL_OP expr
   29     | expr EQ_OP expr
   30     | expr COND_OP expr
   31     | MINUS expr
   32     | NOT expr
   33     | LEFT_ROUND expr RIGHT_ROUND
   34     | location
   35     | method_call

   36 literal: INT_LITERAL
   37        | CHAR_LITERAL
   38        | BOOL_LITERAL
   39        | STRING_LITERAL

   40 location: ID
   41         | ID LEFT_SQUARE expr RIGHT_SQUARE
   42         | ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

   43 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND
   44            | CALLOUT LEFT_ROUND STRING_LITERAL RIGHT_ROUND

   45 callout_args: expr
   46             | callout_args COMMA expr


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_LITERAL (258) 7 8 36
BOOL_LITERAL (259) 38
CHAR_LITERAL (260) 37
STRING_LITERAL (261) 39 43 44
MINUS (262) 31
NOT (263) 32
ID (264) 2 3 4 5 13 16 22 40 41 42
ARITH_OP (265) 27
REL_OP (266) 28
EQ_OP (267) 29
COND_OP (268) 30
LEFT_ROUND (269) 2 3 18 19 21 22 33 43 44
RIGHT_ROUND (270) 2 3 18 19 21 22 33 43 44
TYPE (271) 6 7 8
BAD_CHAR (272)
COMMA (273) 5 43 46
SEMICOLON (274) 13 16 17 22 23 24 25
EQUALS (275) 16 22
QUESTION_MARK (276) 20
COLON (277) 20
LEFT_SQUARE (278) 7 8 41 42
RIGHT_SQUARE (279) 7 8 41 42
LEFT_CURLY (280) 9 10
RIGHT_CURLY (281) 9 10
CALLOUT (282) 43 44
IF (283) 18 19
ELSE (284) 19
FOR (285) 22
WHILE (286) 21
RETURN (287) 23
BREAK (288) 24
CONTINUE (289) 25
CLASS (290)
PROGRAM (291)


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
Goal (38)
    on left: 1, on right: 0
method_decl (39)
    on left: 2 3, on right: 1
parameters (40)
    on left: 4 5, on right: 2 5
composite_type (41)
    on left: 6 7 8, on right: 2 3 4 5 13
block (42)
    on left: 9 10, on right: 2 3 18 19 21 22
var_decls (43)
    on left: 11 12, on right: 9 12
var_decl (44)
    on left: 13, on right: 11 12
statements (45)
    on left: 14 15, on right: 9 10 15
statement (46)
    on left: 16 17 18 19 20 21 22 23 24 25, on right: 14 15 20
expr (47)
    on left: 26 27 28 29 30 31 32 33 34 35, on right: 16 18 19 20 21
    22 23 27 28 29 30 31 32 33 41 42 45 46
literal (48)
    on left: 36 37 38 39, on right: 26
location (49)
    on left: 40 41 42, on right: 34
method_call (50)
    on left: 43 44, on right: 17 35
callout_args (51)
    on left: 45 46, on right: 43 46


State 0

    0 $accept: . Goal $end

    TYPE  shift, and go to state 1

    Goal            go to state 2
    method_decl     go to state 3
    composite_type  go to state 4


State 1

    6 composite_type: TYPE .
    7               | TYPE . LEFT_SQUARE INT_LITERAL RIGHT_SQUARE
    8               | TYPE . LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 5

    $default  reduce using rule 6 (composite_type)


State 2

    0 $accept: Goal . $end

    $end  shift, and go to state 6


State 3

    1 Goal: method_decl .

    $default  reduce using rule 1 (Goal)


State 4

    2 method_decl: composite_type . ID LEFT_ROUND parameters RIGHT_ROUND block
    3            | composite_type . ID LEFT_ROUND RIGHT_ROUND block

    ID  shift, and go to state 7


State 5

    7 composite_type: TYPE LEFT_SQUARE . INT_LITERAL RIGHT_SQUARE
    8               | TYPE LEFT_SQUARE . INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    INT_LITERAL  shift, and go to state 8


State 6

    0 $accept: Goal $end .

    $default  accept


State 7

    2 method_decl: composite_type ID . LEFT_ROUND parameters RIGHT_ROUND block
    3            | composite_type ID . LEFT_ROUND RIGHT_ROUND block

    LEFT_ROUND  shift, and go to state 9


State 8

    7 composite_type: TYPE LEFT_SQUARE INT_LITERAL . RIGHT_SQUARE
    8               | TYPE LEFT_SQUARE INT_LITERAL . RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 10


State 9

    2 method_decl: composite_type ID LEFT_ROUND . parameters RIGHT_ROUND block
    3            | composite_type ID LEFT_ROUND . RIGHT_ROUND block

    RIGHT_ROUND  shift, and go to state 11
    TYPE         shift, and go to state 1

    parameters      go to state 12
    composite_type  go to state 13


State 10

    7 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE .
    8               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE . LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 14

    $default  reduce using rule 7 (composite_type)


State 11

    3 method_decl: composite_type ID LEFT_ROUND RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 15

    block  go to state 16


State 12

    2 method_decl: composite_type ID LEFT_ROUND parameters . RIGHT_ROUND block
    5 parameters: parameters . COMMA composite_type ID

    RIGHT_ROUND  shift, and go to state 17
    COMMA        shift, and go to state 18


State 13

    4 parameters: composite_type . ID

    ID  shift, and go to state 19


State 14

    8 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE . INT_LITERAL RIGHT_SQUARE

    INT_LITERAL  shift, and go to state 20


State 15

    9 block: LEFT_CURLY . var_decls statements RIGHT_CURLY
   10      | LEFT_CURLY . statements RIGHT_CURLY

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 27
    LEFT_ROUND      shift, and go to state 28
    TYPE            shift, and go to state 1
    CALLOUT         shift, and go to state 29
    IF              shift, and go to state 30
    FOR             shift, and go to state 31
    WHILE           shift, and go to state 32
    RETURN          shift, and go to state 33
    BREAK           shift, and go to state 34
    CONTINUE        shift, and go to state 35

    composite_type  go to state 36
    var_decls       go to state 37
    var_decl        go to state 38
    statements      go to state 39
    statement       go to state 40
    expr            go to state 41
    literal         go to state 42
    location        go to state 43
    method_call     go to state 44


State 16

    3 method_decl: composite_type ID LEFT_ROUND RIGHT_ROUND block .

    $default  reduce using rule 3 (method_decl)


State 17

    2 method_decl: composite_type ID LEFT_ROUND parameters RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 15

    block  go to state 45


State 18

    5 parameters: parameters COMMA . composite_type ID

    TYPE  shift, and go to state 1

    composite_type  go to state 46


State 19

    4 parameters: composite_type ID .

    $default  reduce using rule 4 (parameters)


State 20

    8 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 47


State 21

   36 literal: INT_LITERAL .

    $default  reduce using rule 36 (literal)


State 22

   38 literal: BOOL_LITERAL .

    $default  reduce using rule 38 (literal)


State 23

   37 literal: CHAR_LITERAL .

    $default  reduce using rule 37 (literal)


State 24

   39 literal: STRING_LITERAL .

    $default  reduce using rule 39 (literal)


State 25

   31 expr: MINUS . expr

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 49
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 26

   32 expr: NOT . expr

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 51
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 27

   16 statement: ID . EQUALS expr SEMICOLON
   40 location: ID .
   41         | ID . LEFT_SQUARE expr RIGHT_SQUARE
   42         | ID . LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

    EQUALS       shift, and go to state 52
    LEFT_SQUARE  shift, and go to state 53

    $default  reduce using rule 40 (location)


State 28

   33 expr: LEFT_ROUND . expr RIGHT_ROUND

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 54
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 29

   43 method_call: CALLOUT . LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND
   44            | CALLOUT . LEFT_ROUND STRING_LITERAL RIGHT_ROUND

    LEFT_ROUND  shift, and go to state 55


State 30

   18 statement: IF . LEFT_ROUND expr RIGHT_ROUND block
   19          | IF . LEFT_ROUND expr RIGHT_ROUND block ELSE block

    LEFT_ROUND  shift, and go to state 56


State 31

   22 statement: FOR . LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    LEFT_ROUND  shift, and go to state 57


State 32

   21 statement: WHILE . LEFT_ROUND expr RIGHT_ROUND block

    LEFT_ROUND  shift, and go to state 58


State 33

   23 statement: RETURN . expr SEMICOLON

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 59
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 34

   24 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 60


State 35

   25 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 61


State 36

   13 var_decl: composite_type . ID SEMICOLON

    ID  shift, and go to state 62


State 37

    9 block: LEFT_CURLY var_decls . statements RIGHT_CURLY
   12 var_decls: var_decls . var_decl

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 27
    LEFT_ROUND      shift, and go to state 28
    TYPE            shift, and go to state 1
    CALLOUT         shift, and go to state 29
    IF              shift, and go to state 30
    FOR             shift, and go to state 31
    WHILE           shift, and go to state 32
    RETURN          shift, and go to state 33
    BREAK           shift, and go to state 34
    CONTINUE        shift, and go to state 35

    composite_type  go to state 36
    var_decl        go to state 63
    statements      go to state 64
    statement       go to state 40
    expr            go to state 41
    literal         go to state 42
    location        go to state 43
    method_call     go to state 44


State 38

   11 var_decls: var_decl .

    $default  reduce using rule 11 (var_decls)


State 39

   10 block: LEFT_CURLY statements . RIGHT_CURLY
   15 statements: statements . statement

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 27
    LEFT_ROUND      shift, and go to state 28
    RIGHT_CURLY     shift, and go to state 65
    CALLOUT         shift, and go to state 29
    IF              shift, and go to state 30
    FOR             shift, and go to state 31
    WHILE           shift, and go to state 32
    RETURN          shift, and go to state 33
    BREAK           shift, and go to state 34
    CONTINUE        shift, and go to state 35

    statement    go to state 66
    expr         go to state 41
    literal      go to state 42
    location     go to state 43
    method_call  go to state 44


State 40

   14 statements: statement .

    $default  reduce using rule 14 (statements)


State 41

   20 statement: expr . QUESTION_MARK statement COLON statement
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP       shift, and go to state 67
    REL_OP         shift, and go to state 68
    EQ_OP          shift, and go to state 69
    COND_OP        shift, and go to state 70
    QUESTION_MARK  shift, and go to state 71


State 42

   26 expr: literal .

    $default  reduce using rule 26 (expr)


State 43

   34 expr: location .

    $default  reduce using rule 34 (expr)


State 44

   17 statement: method_call . SEMICOLON
   35 expr: method_call .

    SEMICOLON  shift, and go to state 72

    $default  reduce using rule 35 (expr)


State 45

    2 method_decl: composite_type ID LEFT_ROUND parameters RIGHT_ROUND block .

    $default  reduce using rule 2 (method_decl)


State 46

    5 parameters: parameters COMMA composite_type . ID

    ID  shift, and go to state 73


State 47

    8 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE .

    $default  reduce using rule 8 (composite_type)


State 48

   40 location: ID .
   41         | ID . LEFT_SQUARE expr RIGHT_SQUARE
   42         | ID . LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 53

    $default  reduce using rule 40 (location)


State 49

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   31     | MINUS expr .

    ARITH_OP  shift, and go to state 67
    REL_OP    shift, and go to state 68
    EQ_OP     shift, and go to state 69
    COND_OP   shift, and go to state 70

    $default  reduce using rule 31 (expr)


State 50

   35 expr: method_call .

    $default  reduce using rule 35 (expr)


State 51

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   32     | NOT expr .

    ARITH_OP  shift, and go to state 67
    REL_OP    shift, and go to state 68
    EQ_OP     shift, and go to state 69
    COND_OP   shift, and go to state 70

    $default  reduce using rule 32 (expr)


State 52

   16 statement: ID EQUALS . expr SEMICOLON

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 74
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 53

   41 location: ID LEFT_SQUARE . expr RIGHT_SQUARE
   42         | ID LEFT_SQUARE . expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 75
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 54

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   33     | LEFT_ROUND expr . RIGHT_ROUND

    ARITH_OP     shift, and go to state 67
    REL_OP       shift, and go to state 68
    EQ_OP        shift, and go to state 69
    COND_OP      shift, and go to state 70
    RIGHT_ROUND  shift, and go to state 76


State 55

   43 method_call: CALLOUT LEFT_ROUND . STRING_LITERAL COMMA callout_args RIGHT_ROUND
   44            | CALLOUT LEFT_ROUND . STRING_LITERAL RIGHT_ROUND

    STRING_LITERAL  shift, and go to state 77


State 56

   18 statement: IF LEFT_ROUND . expr RIGHT_ROUND block
   19          | IF LEFT_ROUND . expr RIGHT_ROUND block ELSE block

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 78
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 57

   22 statement: FOR LEFT_ROUND . ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    ID  shift, and go to state 79


State 58

   21 statement: WHILE LEFT_ROUND . expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 80
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 59

   23 statement: RETURN expr . SEMICOLON
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 67
    REL_OP     shift, and go to state 68
    EQ_OP      shift, and go to state 69
    COND_OP    shift, and go to state 70
    SEMICOLON  shift, and go to state 81


State 60

   24 statement: BREAK SEMICOLON .

    $default  reduce using rule 24 (statement)


State 61

   25 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 25 (statement)


State 62

   13 var_decl: composite_type ID . SEMICOLON

    SEMICOLON  shift, and go to state 82


State 63

   12 var_decls: var_decls var_decl .

    $default  reduce using rule 12 (var_decls)


State 64

    9 block: LEFT_CURLY var_decls statements . RIGHT_CURLY
   15 statements: statements . statement

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 27
    LEFT_ROUND      shift, and go to state 28
    RIGHT_CURLY     shift, and go to state 83
    CALLOUT         shift, and go to state 29
    IF              shift, and go to state 30
    FOR             shift, and go to state 31
    WHILE           shift, and go to state 32
    RETURN          shift, and go to state 33
    BREAK           shift, and go to state 34
    CONTINUE        shift, and go to state 35

    statement    go to state 66
    expr         go to state 41
    literal      go to state 42
    location     go to state 43
    method_call  go to state 44


State 65

   10 block: LEFT_CURLY statements RIGHT_CURLY .

    $default  reduce using rule 10 (block)


State 66

   15 statements: statements statement .

    $default  reduce using rule 15 (statements)


State 67

   27 expr: expr ARITH_OP . expr

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 84
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 68

   28 expr: expr REL_OP . expr

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 85
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 69

   29 expr: expr EQ_OP . expr

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 86
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 70

   30 expr: expr COND_OP . expr

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 87
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 71

   20 statement: expr QUESTION_MARK . statement COLON statement

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 27
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29
    IF              shift, and go to state 30
    FOR             shift, and go to state 31
    WHILE           shift, and go to state 32
    RETURN          shift, and go to state 33
    BREAK           shift, and go to state 34
    CONTINUE        shift, and go to state 35

    statement    go to state 88
    expr         go to state 41
    literal      go to state 42
    location     go to state 43
    method_call  go to state 44


State 72

   17 statement: method_call SEMICOLON .

    $default  reduce using rule 17 (statement)


State 73

    5 parameters: parameters COMMA composite_type ID .

    $default  reduce using rule 5 (parameters)


State 74

   16 statement: ID EQUALS expr . SEMICOLON
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 67
    REL_OP     shift, and go to state 68
    EQ_OP      shift, and go to state 69
    COND_OP    shift, and go to state 70
    SEMICOLON  shift, and go to state 89


State 75

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   41 location: ID LEFT_SQUARE expr . RIGHT_SQUARE
   42         | ID LEFT_SQUARE expr . RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

    ARITH_OP      shift, and go to state 67
    REL_OP        shift, and go to state 68
    EQ_OP         shift, and go to state 69
    COND_OP       shift, and go to state 70
    RIGHT_SQUARE  shift, and go to state 90


State 76

   33 expr: LEFT_ROUND expr RIGHT_ROUND .

    $default  reduce using rule 33 (expr)


State 77

   43 method_call: CALLOUT LEFT_ROUND STRING_LITERAL . COMMA callout_args RIGHT_ROUND
   44            | CALLOUT LEFT_ROUND STRING_LITERAL . RIGHT_ROUND

    RIGHT_ROUND  shift, and go to state 91
    COMMA        shift, and go to state 92


State 78

   18 statement: IF LEFT_ROUND expr . RIGHT_ROUND block
   19          | IF LEFT_ROUND expr . RIGHT_ROUND block ELSE block
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP     shift, and go to state 67
    REL_OP       shift, and go to state 68
    EQ_OP        shift, and go to state 69
    COND_OP      shift, and go to state 70
    RIGHT_ROUND  shift, and go to state 93


State 79

   22 statement: FOR LEFT_ROUND ID . EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    EQUALS  shift, and go to state 94


State 80

   21 statement: WHILE LEFT_ROUND expr . RIGHT_ROUND block
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP     shift, and go to state 67
    REL_OP       shift, and go to state 68
    EQ_OP        shift, and go to state 69
    COND_OP      shift, and go to state 70
    RIGHT_ROUND  shift, and go to state 95


State 81

   23 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 23 (statement)


State 82

   13 var_decl: composite_type ID SEMICOLON .

    $default  reduce using rule 13 (var_decl)


State 83

    9 block: LEFT_CURLY var_decls statements RIGHT_CURLY .

    $default  reduce using rule 9 (block)


State 84

   27 expr: expr . ARITH_OP expr
   27     | expr ARITH_OP expr .
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    $default  reduce using rule 27 (expr)


State 85

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   28     | expr REL_OP expr .
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    $default  reduce using rule 28 (expr)


State 86

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   29     | expr EQ_OP expr .
   30     | expr . COND_OP expr

    $default  reduce using rule 29 (expr)


State 87

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   30     | expr COND_OP expr .

    $default  reduce using rule 30 (expr)


State 88

   20 statement: expr QUESTION_MARK statement . COLON statement

    COLON  shift, and go to state 96


State 89

   16 statement: ID EQUALS expr SEMICOLON .

    $default  reduce using rule 16 (statement)


State 90

   41 location: ID LEFT_SQUARE expr RIGHT_SQUARE .
   42         | ID LEFT_SQUARE expr RIGHT_SQUARE . LEFT_SQUARE expr RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 97

    $default  reduce using rule 41 (location)


State 91

   44 method_call: CALLOUT LEFT_ROUND STRING_LITERAL RIGHT_ROUND .

    $default  reduce using rule 44 (method_call)


State 92

   43 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA . callout_args RIGHT_ROUND

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr          go to state 98
    literal       go to state 42
    location      go to state 43
    method_call   go to state 50
    callout_args  go to state 99


State 93

   18 statement: IF LEFT_ROUND expr RIGHT_ROUND . block
   19          | IF LEFT_ROUND expr RIGHT_ROUND . block ELSE block

    LEFT_CURLY  shift, and go to state 15

    block  go to state 100


State 94

   22 statement: FOR LEFT_ROUND ID EQUALS . expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 101
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 95

   21 statement: WHILE LEFT_ROUND expr RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 15

    block  go to state 102


State 96

   20 statement: expr QUESTION_MARK statement COLON . statement

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 27
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29
    IF              shift, and go to state 30
    FOR             shift, and go to state 31
    WHILE           shift, and go to state 32
    RETURN          shift, and go to state 33
    BREAK           shift, and go to state 34
    CONTINUE        shift, and go to state 35

    statement    go to state 103
    expr         go to state 41
    literal      go to state 42
    location     go to state 43
    method_call  go to state 44


State 97

   42 location: ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE . expr RIGHT_SQUARE

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 104
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 98

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   45 callout_args: expr .

    ARITH_OP  shift, and go to state 67
    REL_OP    shift, and go to state 68
    EQ_OP     shift, and go to state 69
    COND_OP   shift, and go to state 70

    $default  reduce using rule 45 (callout_args)


State 99

   43 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args . RIGHT_ROUND
   46 callout_args: callout_args . COMMA expr

    RIGHT_ROUND  shift, and go to state 105
    COMMA        shift, and go to state 106


State 100

   18 statement: IF LEFT_ROUND expr RIGHT_ROUND block .
   19          | IF LEFT_ROUND expr RIGHT_ROUND block . ELSE block

    ELSE  shift, and go to state 107

    $default  reduce using rule 18 (statement)


State 101

   22 statement: FOR LEFT_ROUND ID EQUALS expr . SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 67
    REL_OP     shift, and go to state 68
    EQ_OP      shift, and go to state 69
    COND_OP    shift, and go to state 70
    SEMICOLON  shift, and go to state 108


State 102

   21 statement: WHILE LEFT_ROUND expr RIGHT_ROUND block .

    $default  reduce using rule 21 (statement)


State 103

   20 statement: expr QUESTION_MARK statement COLON statement .

    $default  reduce using rule 20 (statement)


State 104

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   42 location: ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr . RIGHT_SQUARE

    ARITH_OP      shift, and go to state 67
    REL_OP        shift, and go to state 68
    EQ_OP         shift, and go to state 69
    COND_OP       shift, and go to state 70
    RIGHT_SQUARE  shift, and go to state 109


State 105

   43 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND .

    $default  reduce using rule 43 (method_call)


State 106

   46 callout_args: callout_args COMMA . expr

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 110
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 107

   19 statement: IF LEFT_ROUND expr RIGHT_ROUND block ELSE . block

    LEFT_CURLY  shift, and go to state 15

    block  go to state 111


State 108

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON . expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 112
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 109

   42 location: ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 42 (location)


State 110

   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr
   46 callout_args: callout_args COMMA expr .

    ARITH_OP  shift, and go to state 67
    REL_OP    shift, and go to state 68
    EQ_OP     shift, and go to state 69
    COND_OP   shift, and go to state 70

    $default  reduce using rule 46 (callout_args)


State 111

   19 statement: IF LEFT_ROUND expr RIGHT_ROUND block ELSE block .

    $default  reduce using rule 19 (statement)


State 112

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr . SEMICOLON ID EQUALS expr RIGHT_ROUND block
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 67
    REL_OP     shift, and go to state 68
    EQ_OP      shift, and go to state 69
    COND_OP    shift, and go to state 70
    SEMICOLON  shift, and go to state 113


State 113

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON . ID EQUALS expr RIGHT_ROUND block

    ID  shift, and go to state 114


State 114

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID . EQUALS expr RIGHT_ROUND block

    EQUALS  shift, and go to state 115


State 115

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS . expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 21
    BOOL_LITERAL    shift, and go to state 22
    CHAR_LITERAL    shift, and go to state 23
    STRING_LITERAL  shift, and go to state 24
    MINUS           shift, and go to state 25
    NOT             shift, and go to state 26
    ID              shift, and go to state 48
    LEFT_ROUND      shift, and go to state 28
    CALLOUT         shift, and go to state 29

    expr         go to state 116
    literal      go to state 42
    location     go to state 43
    method_call  go to state 50


State 116

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr . RIGHT_ROUND block
   27 expr: expr . ARITH_OP expr
   28     | expr . REL_OP expr
   29     | expr . EQ_OP expr
   30     | expr . COND_OP expr

    ARITH_OP     shift, and go to state 67
    REL_OP       shift, and go to state 68
    EQ_OP        shift, and go to state 69
    COND_OP      shift, and go to state 70
    RIGHT_ROUND  shift, and go to state 117


State 117

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 15

    block  go to state 118


State 118

   22 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block .

    $default  reduce using rule 22 (statement)
