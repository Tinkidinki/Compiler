Nonterminals useless in grammar

   program
   method_decl
   method_decls
   parameters
   composite_type
   block
   var_decls
   var_decl
   statements
   statement
   bin_op


Terminals unused in grammar

   TYPE
   BAD_CHAR
   SEMICOLON
   EQUALS
   QUESTION_MARK
   COLON
   LEFT_CURLY
   RIGHT_CURLY
   IF
   ELSE
   FOR
   WHILE
   RETURN
   BREAK
   CONTINUE
   CLASS
   PROGRAM


Rules useless in grammar

   23 program: CLASS PROGRAM LEFT_CURLY var_decls method_decls RIGHT_CURLY
   24        | CLASS PROGRAM LEFT_CURLY method_decls RIGHT_CURLY

   25 method_decl: composite_type ID LEFT_ROUND parameters RIGHT_ROUND block
   26            | composite_type ID LEFT_ROUND RIGHT_ROUND block

   27 method_decls: method_decl
   28             | method_decls method_decl

   29 parameters: composite_type ID
   30           | parameters COMMA composite_type ID

   31 composite_type: TYPE
   32               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE
   33               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

   34 block: LEFT_CURLY var_decls statements RIGHT_CURLY
   35      | LEFT_CURLY statements RIGHT_CURLY

   36 var_decls: var_decl
   37          | var_decls var_decl

   38 var_decl: composite_type ID SEMICOLON

   39 statements: statement
   40           | statements statement

   41 statement: location EQUALS expr SEMICOLON
   42          | method_call SEMICOLON
   43          | IF LEFT_ROUND expr RIGHT_ROUND block
   44          | IF LEFT_ROUND expr RIGHT_ROUND block ELSE block
   45          | expr QUESTION_MARK statement COLON statement
   46          | WHILE LEFT_ROUND expr RIGHT_ROUND block
   47          | FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block
   48          | RETURN expr SEMICOLON
   49          | BREAK SEMICOLON
   50          | CONTINUE SEMICOLON

   51 bin_op: ARITH_OP
   52       | REL_OP
   53       | EQ_OP
   54       | COND_OP


Grammar

    0 $accept: Goal $end

    1 Goal: method_call

    2 expr: literal
    3     | expr ARITH_OP expr
    4     | expr REL_OP expr
    5     | expr EQ_OP expr
    6     | expr COND_OP expr
    7     | MINUS expr
    8     | NOT expr
    9     | LEFT_ROUND expr RIGHT_ROUND
   10     | location
   11     | method_call

   12 literal: INT_LITERAL
   13        | CHAR_LITERAL
   14        | BOOL_LITERAL
   15        | STRING_LITERAL

   16 location: ID
   17         | ID LEFT_SQUARE expr RIGHT_SQUARE
   18         | ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

   19 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND
   20            | CALLOUT LEFT_ROUND STRING_LITERAL RIGHT_ROUND

   21 callout_args: expr
   22             | callout_args COMMA expr


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_LITERAL (258) 12
BOOL_LITERAL (259) 14
CHAR_LITERAL (260) 13
STRING_LITERAL (261) 15 19 20
MINUS (262) 7
NOT (263) 8
ID (264) 16 17 18
ARITH_OP (265) 3
REL_OP (266) 4
EQ_OP (267) 5
COND_OP (268) 6
LEFT_ROUND (269) 9 19 20
RIGHT_ROUND (270) 9 19 20
TYPE (271)
BAD_CHAR (272)
COMMA (273) 19 22
SEMICOLON (274)
EQUALS (275)
QUESTION_MARK (276)
COLON (277)
LEFT_SQUARE (278) 17 18
RIGHT_SQUARE (279) 17 18
LEFT_CURLY (280)
RIGHT_CURLY (281)
CALLOUT (282) 19 20
IF (283)
ELSE (284)
FOR (285)
WHILE (286)
RETURN (287)
BREAK (288)
CONTINUE (289)
CLASS (290)
PROGRAM (291)


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
Goal (38)
    on left: 1, on right: 0
expr (39)
    on left: 2 3 4 5 6 7 8 9 10 11, on right: 3 4 5 6 7 8 9 17 18 21
    22
literal (40)
    on left: 12 13 14 15, on right: 2
location (41)
    on left: 16 17 18, on right: 10
method_call (42)
    on left: 19 20, on right: 1 11
callout_args (43)
    on left: 21 22, on right: 19 22


State 0

    0 $accept: . Goal $end

    CALLOUT  shift, and go to state 1

    Goal         go to state 2
    method_call  go to state 3


State 1

   19 method_call: CALLOUT . LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND
   20            | CALLOUT . LEFT_ROUND STRING_LITERAL RIGHT_ROUND

    LEFT_ROUND  shift, and go to state 4


State 2

    0 $accept: Goal . $end

    $end  shift, and go to state 5


State 3

    1 Goal: method_call .

    $default  reduce using rule 1 (Goal)


State 4

   19 method_call: CALLOUT LEFT_ROUND . STRING_LITERAL COMMA callout_args RIGHT_ROUND
   20            | CALLOUT LEFT_ROUND . STRING_LITERAL RIGHT_ROUND

    STRING_LITERAL  shift, and go to state 6


State 5

    0 $accept: Goal $end .

    $default  accept


State 6

   19 method_call: CALLOUT LEFT_ROUND STRING_LITERAL . COMMA callout_args RIGHT_ROUND
   20            | CALLOUT LEFT_ROUND STRING_LITERAL . RIGHT_ROUND

    RIGHT_ROUND  shift, and go to state 7
    COMMA        shift, and go to state 8


State 7

   20 method_call: CALLOUT LEFT_ROUND STRING_LITERAL RIGHT_ROUND .

    $default  reduce using rule 20 (method_call)


State 8

   19 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA . callout_args RIGHT_ROUND

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr          go to state 17
    literal       go to state 18
    location      go to state 19
    method_call   go to state 20
    callout_args  go to state 21


State 9

   12 literal: INT_LITERAL .

    $default  reduce using rule 12 (literal)


State 10

   14 literal: BOOL_LITERAL .

    $default  reduce using rule 14 (literal)


State 11

   13 literal: CHAR_LITERAL .

    $default  reduce using rule 13 (literal)


State 12

   15 literal: STRING_LITERAL .

    $default  reduce using rule 15 (literal)


State 13

    7 expr: MINUS . expr

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 22
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 14

    8 expr: NOT . expr

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 23
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 15

   16 location: ID .
   17         | ID . LEFT_SQUARE expr RIGHT_SQUARE
   18         | ID . LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 24

    $default  reduce using rule 16 (location)


State 16

    9 expr: LEFT_ROUND . expr RIGHT_ROUND

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 25
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 17

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
   21 callout_args: expr .

    ARITH_OP  shift, and go to state 26
    REL_OP    shift, and go to state 27
    EQ_OP     shift, and go to state 28
    COND_OP   shift, and go to state 29

    $default  reduce using rule 21 (callout_args)


State 18

    2 expr: literal .

    $default  reduce using rule 2 (expr)


State 19

   10 expr: location .

    $default  reduce using rule 10 (expr)


State 20

   11 expr: method_call .

    $default  reduce using rule 11 (expr)


State 21

   19 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args . RIGHT_ROUND
   22 callout_args: callout_args . COMMA expr

    RIGHT_ROUND  shift, and go to state 30
    COMMA        shift, and go to state 31


State 22

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
    7     | MINUS expr .

    ARITH_OP  shift, and go to state 26
    REL_OP    shift, and go to state 27
    EQ_OP     shift, and go to state 28
    COND_OP   shift, and go to state 29

    $default  reduce using rule 7 (expr)


State 23

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
    8     | NOT expr .

    ARITH_OP  shift, and go to state 26
    REL_OP    shift, and go to state 27
    EQ_OP     shift, and go to state 28
    COND_OP   shift, and go to state 29

    $default  reduce using rule 8 (expr)


State 24

   17 location: ID LEFT_SQUARE . expr RIGHT_SQUARE
   18         | ID LEFT_SQUARE . expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 32
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 25

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
    9     | LEFT_ROUND expr . RIGHT_ROUND

    ARITH_OP     shift, and go to state 26
    REL_OP       shift, and go to state 27
    EQ_OP        shift, and go to state 28
    COND_OP      shift, and go to state 29
    RIGHT_ROUND  shift, and go to state 33


State 26

    3 expr: expr ARITH_OP . expr

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 34
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 27

    4 expr: expr REL_OP . expr

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 35
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 28

    5 expr: expr EQ_OP . expr

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 36
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 29

    6 expr: expr COND_OP . expr

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 37
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 30

   19 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND .

    $default  reduce using rule 19 (method_call)


State 31

   22 callout_args: callout_args COMMA . expr

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 38
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 32

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
   17 location: ID LEFT_SQUARE expr . RIGHT_SQUARE
   18         | ID LEFT_SQUARE expr . RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE

    ARITH_OP      shift, and go to state 26
    REL_OP        shift, and go to state 27
    EQ_OP         shift, and go to state 28
    COND_OP       shift, and go to state 29
    RIGHT_SQUARE  shift, and go to state 39


State 33

    9 expr: LEFT_ROUND expr RIGHT_ROUND .

    $default  reduce using rule 9 (expr)


State 34

    3 expr: expr . ARITH_OP expr
    3     | expr ARITH_OP expr .
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr

    $default  reduce using rule 3 (expr)


State 35

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    4     | expr REL_OP expr .
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr

    $default  reduce using rule 4 (expr)


State 36

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    5     | expr EQ_OP expr .
    6     | expr . COND_OP expr

    $default  reduce using rule 5 (expr)


State 37

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
    6     | expr COND_OP expr .

    $default  reduce using rule 6 (expr)


State 38

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
   22 callout_args: callout_args COMMA expr .

    ARITH_OP  shift, and go to state 26
    REL_OP    shift, and go to state 27
    EQ_OP     shift, and go to state 28
    COND_OP   shift, and go to state 29

    $default  reduce using rule 22 (callout_args)


State 39

   17 location: ID LEFT_SQUARE expr RIGHT_SQUARE .
   18         | ID LEFT_SQUARE expr RIGHT_SQUARE . LEFT_SQUARE expr RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 40

    $default  reduce using rule 17 (location)


State 40

   18 location: ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE . expr RIGHT_SQUARE

    INT_LITERAL     shift, and go to state 9
    BOOL_LITERAL    shift, and go to state 10
    CHAR_LITERAL    shift, and go to state 11
    STRING_LITERAL  shift, and go to state 12
    MINUS           shift, and go to state 13
    NOT             shift, and go to state 14
    ID              shift, and go to state 15
    LEFT_ROUND      shift, and go to state 16
    CALLOUT         shift, and go to state 1

    expr         go to state 41
    literal      go to state 18
    location     go to state 19
    method_call  go to state 20


State 41

    3 expr: expr . ARITH_OP expr
    4     | expr . REL_OP expr
    5     | expr . EQ_OP expr
    6     | expr . COND_OP expr
   18 location: ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr . RIGHT_SQUARE

    ARITH_OP      shift, and go to state 26
    REL_OP        shift, and go to state 27
    EQ_OP         shift, and go to state 28
    COND_OP       shift, and go to state 29
    RIGHT_SQUARE  shift, and go to state 42


State 42

   18 location: ID LEFT_SQUARE expr RIGHT_SQUARE LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 18 (location)
