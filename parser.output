Terminals unused in grammar

   BAD_CHAR


Grammar

    0 $accept: Goal $end

    1 Goal: program

    2 program: CLASS PROGRAM LEFT_CURLY var_decls method_decls RIGHT_CURLY
    3        | CLASS PROGRAM LEFT_CURLY method_decls RIGHT_CURLY

    4 method_decl: composite_type ID LEFT_ROUND parameters RIGHT_ROUND block
    5            | composite_type ID LEFT_ROUND RIGHT_ROUND block

    6 method_decls: method_decl
    7             | method_decls method_decl

    8 parameters: composite_type ID
    9           | parameters COMMA composite_type ID

   10 composite_type: TYPE
   11               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE
   12               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

   13 block: LEFT_CURLY var_decls statements RIGHT_CURLY
   14      | LEFT_CURLY statements RIGHT_CURLY

   15 var_decls: var_decl
   16          | var_decls var_decl

   17 var_decl: composite_type ID SEMICOLON

   18 statements: statement
   19           | statements statement

   20 statement: identifier EQUALS expr SEMICOLON
   21          | method_call SEMICOLON
   22          | IF LEFT_ROUND expr RIGHT_ROUND block
   23          | IF LEFT_ROUND expr RIGHT_ROUND block ELSE block
   24          | expr QUESTION_MARK statement COLON statement
   25          | WHILE LEFT_ROUND expr RIGHT_ROUND block
   26          | FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block
   27          | RETURN expr SEMICOLON
   28          | BREAK SEMICOLON
   29          | CONTINUE SEMICOLON

   30 expr: literal
   31     | expr ARITH_OP expr
   32     | expr REL_OP expr
   33     | expr EQ_OP expr
   34     | expr COND_OP expr
   35     | MINUS expr
   36     | NOT expr
   37     | LEFT_ROUND expr RIGHT_ROUND
   38     | location
   39     | method_call

   40 literal: INT_LITERAL
   41        | CHAR_LITERAL
   42        | BOOL_LITERAL
   43        | STRING_LITERAL

   44 identifier: ID
   45           | ID LEFT_SQUARE expr RIGHT_SQUARE

   46 location: LID
   47         | LID LEFT_SQUARE expr RIGHT_SQUARE

   48 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND
   49            | CALLOUT LEFT_ROUND STRING_LITERAL RIGHT_ROUND

   50 callout_args: expr
   51             | callout_args COMMA expr


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_LITERAL (258) 11 12 40
BOOL_LITERAL (259) 42
CHAR_LITERAL (260) 41
STRING_LITERAL (261) 43 48 49
MINUS (262) 35
NOT (263) 36
ID (264) 4 5 8 9 17 26 44 45
LID (265) 46 47
ARITH_OP (266) 31
REL_OP (267) 32
EQ_OP (268) 33
COND_OP (269) 34
LEFT_ROUND (270) 4 5 22 23 25 26 37 48 49
RIGHT_ROUND (271) 4 5 22 23 25 26 37 48 49
TYPE (272) 10 11 12
BAD_CHAR (273)
COMMA (274) 9 48 51
SEMICOLON (275) 17 20 21 26 27 28 29
EQUALS (276) 20 26
QUESTION_MARK (277) 24
COLON (278) 24
LEFT_SQUARE (279) 11 12 45 47
RIGHT_SQUARE (280) 11 12 45 47
LEFT_CURLY (281) 2 3 13 14
RIGHT_CURLY (282) 2 3 13 14
CALLOUT (283) 48 49
IF (284) 22 23
ELSE (285) 23
FOR (286) 26
WHILE (287) 25
RETURN (288) 27
BREAK (289) 28
CONTINUE (290) 29
CLASS (291) 2 3
PROGRAM (292) 2 3


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
Goal (39)
    on left: 1, on right: 0
program (40)
    on left: 2 3, on right: 1
method_decl (41)
    on left: 4 5, on right: 6 7
method_decls (42)
    on left: 6 7, on right: 2 3 7
parameters (43)
    on left: 8 9, on right: 4 9
composite_type (44)
    on left: 10 11 12, on right: 4 5 8 9 17
block (45)
    on left: 13 14, on right: 4 5 22 23 25 26
var_decls (46)
    on left: 15 16, on right: 2 13 16
var_decl (47)
    on left: 17, on right: 15 16
statements (48)
    on left: 18 19, on right: 13 14 19
statement (49)
    on left: 20 21 22 23 24 25 26 27 28 29, on right: 18 19 24
expr (50)
    on left: 30 31 32 33 34 35 36 37 38 39, on right: 20 22 23 24 25
    26 27 31 32 33 34 35 36 37 45 47 50 51
literal (51)
    on left: 40 41 42 43, on right: 30
identifier (52)
    on left: 44 45, on right: 20
location (53)
    on left: 46 47, on right: 38
method_call (54)
    on left: 48 49, on right: 21 39
callout_args (55)
    on left: 50 51, on right: 48 51


State 0

    0 $accept: . Goal $end

    CLASS  shift, and go to state 1

    Goal     go to state 2
    program  go to state 3


State 1

    2 program: CLASS . PROGRAM LEFT_CURLY var_decls method_decls RIGHT_CURLY
    3        | CLASS . PROGRAM LEFT_CURLY method_decls RIGHT_CURLY

    PROGRAM  shift, and go to state 4


State 2

    0 $accept: Goal . $end

    $end  shift, and go to state 5


State 3

    1 Goal: program .

    $default  reduce using rule 1 (Goal)


State 4

    2 program: CLASS PROGRAM . LEFT_CURLY var_decls method_decls RIGHT_CURLY
    3        | CLASS PROGRAM . LEFT_CURLY method_decls RIGHT_CURLY

    LEFT_CURLY  shift, and go to state 6


State 5

    0 $accept: Goal $end .

    $default  accept


State 6

    2 program: CLASS PROGRAM LEFT_CURLY . var_decls method_decls RIGHT_CURLY
    3        | CLASS PROGRAM LEFT_CURLY . method_decls RIGHT_CURLY

    TYPE  shift, and go to state 7

    method_decl     go to state 8
    method_decls    go to state 9
    composite_type  go to state 10
    var_decls       go to state 11
    var_decl        go to state 12


State 7

   10 composite_type: TYPE .
   11               | TYPE . LEFT_SQUARE INT_LITERAL RIGHT_SQUARE
   12               | TYPE . LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 13

    $default  reduce using rule 10 (composite_type)


State 8

    6 method_decls: method_decl .

    $default  reduce using rule 6 (method_decls)


State 9

    3 program: CLASS PROGRAM LEFT_CURLY method_decls . RIGHT_CURLY
    7 method_decls: method_decls . method_decl

    TYPE         shift, and go to state 7
    RIGHT_CURLY  shift, and go to state 14

    method_decl     go to state 15
    composite_type  go to state 16


State 10

    4 method_decl: composite_type . ID LEFT_ROUND parameters RIGHT_ROUND block
    5            | composite_type . ID LEFT_ROUND RIGHT_ROUND block
   17 var_decl: composite_type . ID SEMICOLON

    ID  shift, and go to state 17


State 11

    2 program: CLASS PROGRAM LEFT_CURLY var_decls . method_decls RIGHT_CURLY
   16 var_decls: var_decls . var_decl

    TYPE  shift, and go to state 7

    method_decl     go to state 8
    method_decls    go to state 18
    composite_type  go to state 10
    var_decl        go to state 19


State 12

   15 var_decls: var_decl .

    $default  reduce using rule 15 (var_decls)


State 13

   11 composite_type: TYPE LEFT_SQUARE . INT_LITERAL RIGHT_SQUARE
   12               | TYPE LEFT_SQUARE . INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    INT_LITERAL  shift, and go to state 20


State 14

    3 program: CLASS PROGRAM LEFT_CURLY method_decls RIGHT_CURLY .

    $default  reduce using rule 3 (program)


State 15

    7 method_decls: method_decls method_decl .

    $default  reduce using rule 7 (method_decls)


State 16

    4 method_decl: composite_type . ID LEFT_ROUND parameters RIGHT_ROUND block
    5            | composite_type . ID LEFT_ROUND RIGHT_ROUND block

    ID  shift, and go to state 21


State 17

    4 method_decl: composite_type ID . LEFT_ROUND parameters RIGHT_ROUND block
    5            | composite_type ID . LEFT_ROUND RIGHT_ROUND block
   17 var_decl: composite_type ID . SEMICOLON

    LEFT_ROUND  shift, and go to state 22
    SEMICOLON   shift, and go to state 23


State 18

    2 program: CLASS PROGRAM LEFT_CURLY var_decls method_decls . RIGHT_CURLY
    7 method_decls: method_decls . method_decl

    TYPE         shift, and go to state 7
    RIGHT_CURLY  shift, and go to state 24

    method_decl     go to state 15
    composite_type  go to state 16


State 19

   16 var_decls: var_decls var_decl .

    $default  reduce using rule 16 (var_decls)


State 20

   11 composite_type: TYPE LEFT_SQUARE INT_LITERAL . RIGHT_SQUARE
   12               | TYPE LEFT_SQUARE INT_LITERAL . RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 25


State 21

    4 method_decl: composite_type ID . LEFT_ROUND parameters RIGHT_ROUND block
    5            | composite_type ID . LEFT_ROUND RIGHT_ROUND block

    LEFT_ROUND  shift, and go to state 22


State 22

    4 method_decl: composite_type ID LEFT_ROUND . parameters RIGHT_ROUND block
    5            | composite_type ID LEFT_ROUND . RIGHT_ROUND block

    RIGHT_ROUND  shift, and go to state 26
    TYPE         shift, and go to state 7

    parameters      go to state 27
    composite_type  go to state 28


State 23

   17 var_decl: composite_type ID SEMICOLON .

    $default  reduce using rule 17 (var_decl)


State 24

    2 program: CLASS PROGRAM LEFT_CURLY var_decls method_decls RIGHT_CURLY .

    $default  reduce using rule 2 (program)


State 25

   11 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE .
   12               | TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE . LEFT_SQUARE INT_LITERAL RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 29

    $default  reduce using rule 11 (composite_type)


State 26

    5 method_decl: composite_type ID LEFT_ROUND RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 30

    block  go to state 31


State 27

    4 method_decl: composite_type ID LEFT_ROUND parameters . RIGHT_ROUND block
    9 parameters: parameters . COMMA composite_type ID

    RIGHT_ROUND  shift, and go to state 32
    COMMA        shift, and go to state 33


State 28

    8 parameters: composite_type . ID

    ID  shift, and go to state 34


State 29

   12 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE . INT_LITERAL RIGHT_SQUARE

    INT_LITERAL  shift, and go to state 35


State 30

   13 block: LEFT_CURLY . var_decls statements RIGHT_CURLY
   14      | LEFT_CURLY . statements RIGHT_CURLY

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    ID              shift, and go to state 42
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    TYPE            shift, and go to state 7
    CALLOUT         shift, and go to state 45
    IF              shift, and go to state 46
    FOR             shift, and go to state 47
    WHILE           shift, and go to state 48
    RETURN          shift, and go to state 49
    BREAK           shift, and go to state 50
    CONTINUE        shift, and go to state 51

    composite_type  go to state 52
    var_decls       go to state 53
    var_decl        go to state 12
    statements      go to state 54
    statement       go to state 55
    expr            go to state 56
    literal         go to state 57
    identifier      go to state 58
    location        go to state 59
    method_call     go to state 60


State 31

    5 method_decl: composite_type ID LEFT_ROUND RIGHT_ROUND block .

    $default  reduce using rule 5 (method_decl)


State 32

    4 method_decl: composite_type ID LEFT_ROUND parameters RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 30

    block  go to state 61


State 33

    9 parameters: parameters COMMA . composite_type ID

    TYPE  shift, and go to state 7

    composite_type  go to state 62


State 34

    8 parameters: composite_type ID .

    $default  reduce using rule 8 (parameters)


State 35

   12 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL . RIGHT_SQUARE

    RIGHT_SQUARE  shift, and go to state 63


State 36

   40 literal: INT_LITERAL .

    $default  reduce using rule 40 (literal)


State 37

   42 literal: BOOL_LITERAL .

    $default  reduce using rule 42 (literal)


State 38

   41 literal: CHAR_LITERAL .

    $default  reduce using rule 41 (literal)


State 39

   43 literal: STRING_LITERAL .

    $default  reduce using rule 43 (literal)


State 40

   35 expr: MINUS . expr

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 64
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 41

   36 expr: NOT . expr

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 66
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 42

   44 identifier: ID .
   45           | ID . LEFT_SQUARE expr RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 67

    $default  reduce using rule 44 (identifier)


State 43

   46 location: LID .
   47         | LID . LEFT_SQUARE expr RIGHT_SQUARE

    LEFT_SQUARE  shift, and go to state 68

    $default  reduce using rule 46 (location)


State 44

   37 expr: LEFT_ROUND . expr RIGHT_ROUND

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 69
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 45

   48 method_call: CALLOUT . LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND
   49            | CALLOUT . LEFT_ROUND STRING_LITERAL RIGHT_ROUND

    LEFT_ROUND  shift, and go to state 70


State 46

   22 statement: IF . LEFT_ROUND expr RIGHT_ROUND block
   23          | IF . LEFT_ROUND expr RIGHT_ROUND block ELSE block

    LEFT_ROUND  shift, and go to state 71


State 47

   26 statement: FOR . LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    LEFT_ROUND  shift, and go to state 72


State 48

   25 statement: WHILE . LEFT_ROUND expr RIGHT_ROUND block

    LEFT_ROUND  shift, and go to state 73


State 49

   27 statement: RETURN . expr SEMICOLON

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 74
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 50

   28 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 75


State 51

   29 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 76


State 52

   17 var_decl: composite_type . ID SEMICOLON

    ID  shift, and go to state 77


State 53

   13 block: LEFT_CURLY var_decls . statements RIGHT_CURLY
   16 var_decls: var_decls . var_decl

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    ID              shift, and go to state 42
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    TYPE            shift, and go to state 7
    CALLOUT         shift, and go to state 45
    IF              shift, and go to state 46
    FOR             shift, and go to state 47
    WHILE           shift, and go to state 48
    RETURN          shift, and go to state 49
    BREAK           shift, and go to state 50
    CONTINUE        shift, and go to state 51

    composite_type  go to state 52
    var_decl        go to state 19
    statements      go to state 78
    statement       go to state 55
    expr            go to state 56
    literal         go to state 57
    identifier      go to state 58
    location        go to state 59
    method_call     go to state 60


State 54

   14 block: LEFT_CURLY statements . RIGHT_CURLY
   19 statements: statements . statement

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    ID              shift, and go to state 42
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    RIGHT_CURLY     shift, and go to state 79
    CALLOUT         shift, and go to state 45
    IF              shift, and go to state 46
    FOR             shift, and go to state 47
    WHILE           shift, and go to state 48
    RETURN          shift, and go to state 49
    BREAK           shift, and go to state 50
    CONTINUE        shift, and go to state 51

    statement    go to state 80
    expr         go to state 56
    literal      go to state 57
    identifier   go to state 58
    location     go to state 59
    method_call  go to state 60


State 55

   18 statements: statement .

    $default  reduce using rule 18 (statements)


State 56

   24 statement: expr . QUESTION_MARK statement COLON statement
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP       shift, and go to state 81
    REL_OP         shift, and go to state 82
    EQ_OP          shift, and go to state 83
    COND_OP        shift, and go to state 84
    QUESTION_MARK  shift, and go to state 85


State 57

   30 expr: literal .

    $default  reduce using rule 30 (expr)


State 58

   20 statement: identifier . EQUALS expr SEMICOLON

    EQUALS  shift, and go to state 86


State 59

   38 expr: location .

    $default  reduce using rule 38 (expr)


State 60

   21 statement: method_call . SEMICOLON
   39 expr: method_call .

    SEMICOLON  shift, and go to state 87

    $default  reduce using rule 39 (expr)


State 61

    4 method_decl: composite_type ID LEFT_ROUND parameters RIGHT_ROUND block .

    $default  reduce using rule 4 (method_decl)


State 62

    9 parameters: parameters COMMA composite_type . ID

    ID  shift, and go to state 88


State 63

   12 composite_type: TYPE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE LEFT_SQUARE INT_LITERAL RIGHT_SQUARE .

    $default  reduce using rule 12 (composite_type)


State 64

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   35     | MINUS expr .

    ARITH_OP  shift, and go to state 81
    REL_OP    shift, and go to state 82
    EQ_OP     shift, and go to state 83
    COND_OP   shift, and go to state 84

    $default  reduce using rule 35 (expr)


State 65

   39 expr: method_call .

    $default  reduce using rule 39 (expr)


State 66

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   36     | NOT expr .

    ARITH_OP  shift, and go to state 81
    REL_OP    shift, and go to state 82
    EQ_OP     shift, and go to state 83
    COND_OP   shift, and go to state 84

    $default  reduce using rule 36 (expr)


State 67

   45 identifier: ID LEFT_SQUARE . expr RIGHT_SQUARE

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 89
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 68

   47 location: LID LEFT_SQUARE . expr RIGHT_SQUARE

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 90
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 69

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   37     | LEFT_ROUND expr . RIGHT_ROUND

    ARITH_OP     shift, and go to state 81
    REL_OP       shift, and go to state 82
    EQ_OP        shift, and go to state 83
    COND_OP      shift, and go to state 84
    RIGHT_ROUND  shift, and go to state 91


State 70

   48 method_call: CALLOUT LEFT_ROUND . STRING_LITERAL COMMA callout_args RIGHT_ROUND
   49            | CALLOUT LEFT_ROUND . STRING_LITERAL RIGHT_ROUND

    STRING_LITERAL  shift, and go to state 92


State 71

   22 statement: IF LEFT_ROUND . expr RIGHT_ROUND block
   23          | IF LEFT_ROUND . expr RIGHT_ROUND block ELSE block

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 93
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 72

   26 statement: FOR LEFT_ROUND . ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    ID  shift, and go to state 94


State 73

   25 statement: WHILE LEFT_ROUND . expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 95
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 74

   27 statement: RETURN expr . SEMICOLON
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 81
    REL_OP     shift, and go to state 82
    EQ_OP      shift, and go to state 83
    COND_OP    shift, and go to state 84
    SEMICOLON  shift, and go to state 96


State 75

   28 statement: BREAK SEMICOLON .

    $default  reduce using rule 28 (statement)


State 76

   29 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 29 (statement)


State 77

   17 var_decl: composite_type ID . SEMICOLON

    SEMICOLON  shift, and go to state 23


State 78

   13 block: LEFT_CURLY var_decls statements . RIGHT_CURLY
   19 statements: statements . statement

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    ID              shift, and go to state 42
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    RIGHT_CURLY     shift, and go to state 97
    CALLOUT         shift, and go to state 45
    IF              shift, and go to state 46
    FOR             shift, and go to state 47
    WHILE           shift, and go to state 48
    RETURN          shift, and go to state 49
    BREAK           shift, and go to state 50
    CONTINUE        shift, and go to state 51

    statement    go to state 80
    expr         go to state 56
    literal      go to state 57
    identifier   go to state 58
    location     go to state 59
    method_call  go to state 60


State 79

   14 block: LEFT_CURLY statements RIGHT_CURLY .

    $default  reduce using rule 14 (block)


State 80

   19 statements: statements statement .

    $default  reduce using rule 19 (statements)


State 81

   31 expr: expr ARITH_OP . expr

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 98
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 82

   32 expr: expr REL_OP . expr

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 99
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 83

   33 expr: expr EQ_OP . expr

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 100
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 84

   34 expr: expr COND_OP . expr

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 101
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 85

   24 statement: expr QUESTION_MARK . statement COLON statement

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    ID              shift, and go to state 42
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45
    IF              shift, and go to state 46
    FOR             shift, and go to state 47
    WHILE           shift, and go to state 48
    RETURN          shift, and go to state 49
    BREAK           shift, and go to state 50
    CONTINUE        shift, and go to state 51

    statement    go to state 102
    expr         go to state 56
    literal      go to state 57
    identifier   go to state 58
    location     go to state 59
    method_call  go to state 60


State 86

   20 statement: identifier EQUALS . expr SEMICOLON

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 103
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 87

   21 statement: method_call SEMICOLON .

    $default  reduce using rule 21 (statement)


State 88

    9 parameters: parameters COMMA composite_type ID .

    $default  reduce using rule 9 (parameters)


State 89

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   45 identifier: ID LEFT_SQUARE expr . RIGHT_SQUARE

    ARITH_OP      shift, and go to state 81
    REL_OP        shift, and go to state 82
    EQ_OP         shift, and go to state 83
    COND_OP       shift, and go to state 84
    RIGHT_SQUARE  shift, and go to state 104


State 90

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   47 location: LID LEFT_SQUARE expr . RIGHT_SQUARE

    ARITH_OP      shift, and go to state 81
    REL_OP        shift, and go to state 82
    EQ_OP         shift, and go to state 83
    COND_OP       shift, and go to state 84
    RIGHT_SQUARE  shift, and go to state 105


State 91

   37 expr: LEFT_ROUND expr RIGHT_ROUND .

    $default  reduce using rule 37 (expr)


State 92

   48 method_call: CALLOUT LEFT_ROUND STRING_LITERAL . COMMA callout_args RIGHT_ROUND
   49            | CALLOUT LEFT_ROUND STRING_LITERAL . RIGHT_ROUND

    RIGHT_ROUND  shift, and go to state 106
    COMMA        shift, and go to state 107


State 93

   22 statement: IF LEFT_ROUND expr . RIGHT_ROUND block
   23          | IF LEFT_ROUND expr . RIGHT_ROUND block ELSE block
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP     shift, and go to state 81
    REL_OP       shift, and go to state 82
    EQ_OP        shift, and go to state 83
    COND_OP      shift, and go to state 84
    RIGHT_ROUND  shift, and go to state 108


State 94

   26 statement: FOR LEFT_ROUND ID . EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    EQUALS  shift, and go to state 109


State 95

   25 statement: WHILE LEFT_ROUND expr . RIGHT_ROUND block
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP     shift, and go to state 81
    REL_OP       shift, and go to state 82
    EQ_OP        shift, and go to state 83
    COND_OP      shift, and go to state 84
    RIGHT_ROUND  shift, and go to state 110


State 96

   27 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 27 (statement)


State 97

   13 block: LEFT_CURLY var_decls statements RIGHT_CURLY .

    $default  reduce using rule 13 (block)


State 98

   31 expr: expr . ARITH_OP expr
   31     | expr ARITH_OP expr .
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    $default  reduce using rule 31 (expr)


State 99

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   32     | expr REL_OP expr .
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    $default  reduce using rule 32 (expr)


State 100

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   33     | expr EQ_OP expr .
   34     | expr . COND_OP expr

    $default  reduce using rule 33 (expr)


State 101

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   34     | expr COND_OP expr .

    $default  reduce using rule 34 (expr)


State 102

   24 statement: expr QUESTION_MARK statement . COLON statement

    COLON  shift, and go to state 111


State 103

   20 statement: identifier EQUALS expr . SEMICOLON
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 81
    REL_OP     shift, and go to state 82
    EQ_OP      shift, and go to state 83
    COND_OP    shift, and go to state 84
    SEMICOLON  shift, and go to state 112


State 104

   45 identifier: ID LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 45 (identifier)


State 105

   47 location: LID LEFT_SQUARE expr RIGHT_SQUARE .

    $default  reduce using rule 47 (location)


State 106

   49 method_call: CALLOUT LEFT_ROUND STRING_LITERAL RIGHT_ROUND .

    $default  reduce using rule 49 (method_call)


State 107

   48 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA . callout_args RIGHT_ROUND

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr          go to state 113
    literal       go to state 57
    location      go to state 59
    method_call   go to state 65
    callout_args  go to state 114


State 108

   22 statement: IF LEFT_ROUND expr RIGHT_ROUND . block
   23          | IF LEFT_ROUND expr RIGHT_ROUND . block ELSE block

    LEFT_CURLY  shift, and go to state 30

    block  go to state 115


State 109

   26 statement: FOR LEFT_ROUND ID EQUALS . expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 116
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 110

   25 statement: WHILE LEFT_ROUND expr RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 30

    block  go to state 117


State 111

   24 statement: expr QUESTION_MARK statement COLON . statement

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    ID              shift, and go to state 42
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45
    IF              shift, and go to state 46
    FOR             shift, and go to state 47
    WHILE           shift, and go to state 48
    RETURN          shift, and go to state 49
    BREAK           shift, and go to state 50
    CONTINUE        shift, and go to state 51

    statement    go to state 118
    expr         go to state 56
    literal      go to state 57
    identifier   go to state 58
    location     go to state 59
    method_call  go to state 60


State 112

   20 statement: identifier EQUALS expr SEMICOLON .

    $default  reduce using rule 20 (statement)


State 113

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   50 callout_args: expr .

    ARITH_OP  shift, and go to state 81
    REL_OP    shift, and go to state 82
    EQ_OP     shift, and go to state 83
    COND_OP   shift, and go to state 84

    $default  reduce using rule 50 (callout_args)


State 114

   48 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args . RIGHT_ROUND
   51 callout_args: callout_args . COMMA expr

    RIGHT_ROUND  shift, and go to state 119
    COMMA        shift, and go to state 120


State 115

   22 statement: IF LEFT_ROUND expr RIGHT_ROUND block .
   23          | IF LEFT_ROUND expr RIGHT_ROUND block . ELSE block

    ELSE  shift, and go to state 121

    $default  reduce using rule 22 (statement)


State 116

   26 statement: FOR LEFT_ROUND ID EQUALS expr . SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 81
    REL_OP     shift, and go to state 82
    EQ_OP      shift, and go to state 83
    COND_OP    shift, and go to state 84
    SEMICOLON  shift, and go to state 122


State 117

   25 statement: WHILE LEFT_ROUND expr RIGHT_ROUND block .

    $default  reduce using rule 25 (statement)


State 118

   24 statement: expr QUESTION_MARK statement COLON statement .

    $default  reduce using rule 24 (statement)


State 119

   48 method_call: CALLOUT LEFT_ROUND STRING_LITERAL COMMA callout_args RIGHT_ROUND .

    $default  reduce using rule 48 (method_call)


State 120

   51 callout_args: callout_args COMMA . expr

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 123
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 121

   23 statement: IF LEFT_ROUND expr RIGHT_ROUND block ELSE . block

    LEFT_CURLY  shift, and go to state 30

    block  go to state 124


State 122

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON . expr SEMICOLON ID EQUALS expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 125
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 123

   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr
   51 callout_args: callout_args COMMA expr .

    ARITH_OP  shift, and go to state 81
    REL_OP    shift, and go to state 82
    EQ_OP     shift, and go to state 83
    COND_OP   shift, and go to state 84

    $default  reduce using rule 51 (callout_args)


State 124

   23 statement: IF LEFT_ROUND expr RIGHT_ROUND block ELSE block .

    $default  reduce using rule 23 (statement)


State 125

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr . SEMICOLON ID EQUALS expr RIGHT_ROUND block
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP   shift, and go to state 81
    REL_OP     shift, and go to state 82
    EQ_OP      shift, and go to state 83
    COND_OP    shift, and go to state 84
    SEMICOLON  shift, and go to state 126


State 126

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON . ID EQUALS expr RIGHT_ROUND block

    ID  shift, and go to state 127


State 127

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID . EQUALS expr RIGHT_ROUND block

    EQUALS  shift, and go to state 128


State 128

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS . expr RIGHT_ROUND block

    INT_LITERAL     shift, and go to state 36
    BOOL_LITERAL    shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    STRING_LITERAL  shift, and go to state 39
    MINUS           shift, and go to state 40
    NOT             shift, and go to state 41
    LID             shift, and go to state 43
    LEFT_ROUND      shift, and go to state 44
    CALLOUT         shift, and go to state 45

    expr         go to state 129
    literal      go to state 57
    location     go to state 59
    method_call  go to state 65


State 129

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr . RIGHT_ROUND block
   31 expr: expr . ARITH_OP expr
   32     | expr . REL_OP expr
   33     | expr . EQ_OP expr
   34     | expr . COND_OP expr

    ARITH_OP     shift, and go to state 81
    REL_OP       shift, and go to state 82
    EQ_OP        shift, and go to state 83
    COND_OP      shift, and go to state 84
    RIGHT_ROUND  shift, and go to state 130


State 130

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND . block

    LEFT_CURLY  shift, and go to state 30

    block  go to state 131


State 131

   26 statement: FOR LEFT_ROUND ID EQUALS expr SEMICOLON expr SEMICOLON ID EQUALS expr RIGHT_ROUND block .

    $default  reduce using rule 26 (statement)
